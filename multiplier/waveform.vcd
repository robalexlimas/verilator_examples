$version Generated by VerilatedVcd $end
$date Mon Mar  6 16:42:57 2023
 $end
$timescale   1ns $end

 $scope module top $end
  $var wire  8 , a [7:0] $end
  $var wire  8 - b [7:0] $end
  $var wire  1 . cin $end
  $var wire  1 0 cout $end
  $var wire  8 / sum [7:0] $end
  $scope module adder_n $end
   $var wire  8 , a [7:0] $end
   $var wire  8 - b [7:0] $end
   $var wire  1 . cin $end
   $var wire  1 0 cout $end
   $var wire  9 # cout_wire [8:0] $end
   $var wire 32 Q n [31:0] $end
   $var wire  8 / sum [7:0] $end
   $scope module genblk1(0) $end
    $scope module full_adder $end
     $var wire  1 1 a $end
     $var wire  1 2 b $end
     $var wire  1 $ cin $end
     $var wire  1 4 cout $end
     $var wire  1 3 sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(1) $end
    $scope module full_adder $end
     $var wire  1 5 a $end
     $var wire  1 6 b $end
     $var wire  1 % cin $end
     $var wire  1 8 cout $end
     $var wire  1 7 sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(2) $end
    $scope module full_adder $end
     $var wire  1 9 a $end
     $var wire  1 : b $end
     $var wire  1 & cin $end
     $var wire  1 < cout $end
     $var wire  1 ; sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(3) $end
    $scope module full_adder $end
     $var wire  1 = a $end
     $var wire  1 > b $end
     $var wire  1 ' cin $end
     $var wire  1 @ cout $end
     $var wire  1 ? sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(4) $end
    $scope module full_adder $end
     $var wire  1 A a $end
     $var wire  1 B b $end
     $var wire  1 ( cin $end
     $var wire  1 D cout $end
     $var wire  1 C sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(5) $end
    $scope module full_adder $end
     $var wire  1 E a $end
     $var wire  1 F b $end
     $var wire  1 ) cin $end
     $var wire  1 H cout $end
     $var wire  1 G sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(6) $end
    $scope module full_adder $end
     $var wire  1 I a $end
     $var wire  1 J b $end
     $var wire  1 * cin $end
     $var wire  1 L cout $end
     $var wire  1 K sum $end
    $upscope $end
   $upscope $end
   $scope module genblk1(7) $end
    $scope module full_adder $end
     $var wire  1 M a $end
     $var wire  1 N b $end
     $var wire  1 + cin $end
     $var wire  1 P cout $end
     $var wire  1 O sum $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b000000000 #
0$
0%
0&
0'
0(
0)
0*
0+
b00000000 ,
b00000000 -
0.
b00000000 /
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
b00000000000000000000000000001000 Q
#1
b00000001 ,
b00000001 /
11
13
#2
b00000010 ,
b00000001 -
b00000011 /
01
12
15
17
#3
b000000110 #
1%
1&
b00000011 ,
b00000100 /
11
03
14
07
18
1;
#4
b000000001 #
1$
0%
0&
b00000100 ,
b00000010 -
1.
b00000111 /
01
02
13
04
05
16
17
08
19
#5
b000001111 #
1%
1&
1'
b00000101 ,
b00001000 /
11
03
14
07
18
0;
1<
1?
#6
b00000110 ,
b00000011 -
b00001010 /
01
12
15
17
#7
b00000111 ,
b00001011 /
11
13
#8
b000000000 #
0$
0%
0&
0'
b00001000 ,
b00000100 -
0.
b00001110 /
01
02
03
04
05
06
07
08
09
1:
1;
0<
1=
#9
b00001001 ,
b00001111 /
11
13
#10
b000011100 #
1&
1'
1(
b00001010 ,
b00000101 -
b00010001 /
01
12
15
17
0;
1<
0?
1@
1C
#11
b000011110 #
1%
b00001011 ,
b00010000 /
11
03
14
07
18
#12
b000011101 #
1$
0%
b00001100 ,
b00000110 -
1.
b00010101 /
01
02
13
04
05
16
17
08
19
1;
#13
b000011111 #
1%
b00001101 ,
b00010100 /
11
03
14
07
18
#14
b00001110 ,
b00000111 -
b00010110 /
01
12
15
17
#15
b00001111 ,
b00010111 /
11
13
#16
b000000000 #
0$
0%
0&
0'
0(
b00010000 ,
b00001000 -
0.
b00011100 /
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
1>
1?
0@
1A
#17
b00010001 ,
b00011101 /
11
13
#18
b00010010 ,
b00001001 -
b00011111 /
01
12
15
17
#19
b000000110 #
1%
1&
b00010011 ,
b00011100 /
11
03
14
07
18
1;
#20
b000111001 #
1$
0%
0&
1'
1(
1)
b00010100 ,
b00001010 -
1.
b00100011 /
01
02
13
04
05
16
17
08
19
0?
1@
0C
1D
1G
#21
b000111111 #
1%
1&
b00010101 ,
b00100000 /
11
03
14
07
18
0;
1<
#22
b00010110 ,
b00001011 -
b00100010 /
01
12
15
17
#23
b00010111 ,
b00100011 /
11
13
#24
b000111000 #
0$
0%
0&
b00011000 ,
b00001100 -
0.
b00101010 /
01
02
03
04
05
06
07
08
09
1:
1;
0<
1=
1?
#25
b00011001 ,
b00101011 /
11
13
#26
b000111100 #
1&
b00011010 ,
b00001101 -
b00101001 /
01
12
15
17
0;
1<
#27
b000111110 #
1%
b00011011 ,
b00101000 /
11
03
14
07
18
#28
b000111101 #
1$
0%
b00011100 ,
b00001110 -
1.
b00101101 /
01
02
13
04
05
16
17
08
19
1;
#29
b000111111 #
1%
b00011101 ,
b00101100 /
11
03
14
07
18
#30
b00011110 ,
b00001111 -
b00101110 /
01
12
15
17
#31
b00011111 ,
b00101111 /
11
13
#32
b000000000 #
0$
0%
0&
0'
0(
0)
b00100000 ,
b00010000 -
0.
b00111000 /
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
1B
1C
0D
1E
#33
b00100001 ,
b00111001 /
11
13
#34
b00100010 ,
b00010001 -
b00111011 /
01
12
15
17
#35
b000000110 #
1%
1&
b00100011 ,
b00111100 /
11
03
14
07
18
1;
#36
b000000001 #
1$
0%
0&
b00100100 ,
b00010010 -
1.
b00111111 /
01
02
13
04
05
16
17
08
19
#37
b000001111 #
1%
1&
1'
b00100101 ,
b00111000 /
11
03
14
07
18
0;
1<
1?
#38
b00100110 ,
b00010011 -
b00111010 /
01
12
15
17
#39
b00100111 ,
b00111011 /
11
13
